aiohappyeyeballs==2.4.3
aiohttp==3.10.10
aiosignal==1.3.1
async-timeout==4.0.3
attrs==24.2.0
backoff==2.2.1
blinker==1.8.2
certifi==2024.8.30
charset-normalizer==3.4.0
click==8.1.7
Flask==3.0.3
frozenlist==1.5.0
geographiclib==2.0
geopy==2.4.1
idna==3.10
importlib_metadata==8.5.0
itsdangerous==2.2.0
Jinja2==3.1.4
MarkupSafe==2.1.5
multidict==6.1.0
opencage==3.0.2
propcache==0.2.0
requests==2.32.3
tqdm==4.66.6
typing_extensions==4.12.2
urllib3==2.2.3
Werkzeug==3.0.6
yarl==1.15.2
zipp==3.20.2

Function find_nearest_hospitals_osm(pin_code):
    # Step 1: Geocode the pin code to get latitude and longitude
    results = geocode(pin_code)  # Use OpenCage Geocoder
    If results are empty:
        Return None  # No location found

    # Extract user latitude and longitude
    lat, lng = results[0].latitude, results[0].longitude
    user_location = (lat, lng)

    # Step 2: Query Overpass API to find hospitals within a 10 km radius of user's location
    overpass_url = "http://overpass-api.de/api/interpreter"
    overpass_query = """
        [out:json];
        node["amenity"="hospital"](around:10000, lat, lng);
        out;
    """
    response = send_request(overpass_url, data=overpass_query)

    If response is not successful:
        Return None

    data = parse_json(response)
    If data['elements'] is empty:
        Return None  # No hospitals found

    # Step 3: Calculate distances and sort hospitals
    hospitals = []
    For each hospital in data['elements']:
        hospital_location = (hospital.latitude, hospital.longitude)
        distance = calculate_geodesic_distance(user_location, hospital_location)  # In meters
        hospital_name = hospital.get('name', 'Unnamed Hospital')
        Add (hospital_name, hospital_location, distance) to hospitals list

    # Sort hospitals by distance
    Sort hospitals by distance in ascending order
    nearest_hospitals = first 2 items in hospitals list

    # Step 4: Reverse geocode and format the final hospital information
    hospital_info_list = []
    For each hospital in nearest_hospitals:
        name, location, distance = hospital
        lat, lng = location
        reverse_results = reverse_geocode(lat, lng)  # Use OpenCage for detailed address
        If reverse_results is not empty:
            detailed_address = reverse_results[0].formatted_address
        Else:
            detailed_address = "Address not available"

        Add {"name": name, "address": detailed_address, "distance": distance} to hospital_info_list

    Return hospital_info_list  # List of nearest hospital details with name, address, and distance
